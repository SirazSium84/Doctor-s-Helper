#!/bin/bash

# Healthcare Dashboard Supabase Integration Setup Script
echo "🏥 Healthcare Dashboard Supabase Integration Setup"
echo "================================================="

# Check if we're in the correct directory
if [[ ! -f "package.json" ]] || [[ ! -d "src" ]]; then
    echo "❌ Error: Please run this script from the healthcare-dashboard root directory"
    exit 1
fi

# Function to prompt for environment variables
setup_env_file() {
    local env_file="$1"
    local env_type="$2"
    
    echo ""
    echo "📝 Setting up $env_type environment file: $env_file"
    
    if [[ -f "$env_file" ]]; then
        echo "⚠️  Environment file already exists: $env_file"
        read -p "Do you want to overwrite it? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "⏭️  Skipping $env_type environment setup"
            return
        fi
    fi
    
    echo "Please provide your Supabase credentials:"
    
    read -p "📡 Supabase URL: " supabase_url
    read -p "🔑 Supabase Anon Key: " supabase_key
    read -p "🔐 Supabase Service Role Key: " supabase_service_key
    
    if [[ -z "$supabase_url" ]] || [[ -z "$supabase_key" ]] || [[ -z "$supabase_service_key" ]]; then
        echo "❌ Error: All Supabase credentials are required"
        return 1
    fi
    
    # Create the environment file
    cat > "$env_file" << EOF
# Healthcare Dashboard Environment Variables
# Generated by setup script on $(date)

# MCP Server Configuration
MCP_SERVER_URL=http://localhost:3001
MCP_SERVER_ENABLED=true

# Supabase Configuration
SUPABASE_URL=$supabase_url
SUPABASE_KEY=$supabase_key
SUPABASE_SERVICE_ROLE_KEY=$supabase_service_key

# Development Settings
NODE_ENV=development
NEXT_PUBLIC_API_URL=http://localhost:3000
EOF
    
    echo "✅ Created $env_type environment file: $env_file"
}

# Setup dashboard environment
echo ""
echo "🎯 Step 1: Configure Healthcare Dashboard"
setup_env_file ".env.local" "Dashboard"

# Setup MCP server environment
echo ""
echo "🎯 Step 2: Configure MCP Server"
if [[ -d "../ai-assited-healthcare" ]]; then
    cd "../ai-assited-healthcare"
    setup_env_file ".env" "MCP Server"
    cd - > /dev/null
else
    echo "⚠️  MCP server directory not found at ../ai-assited-healthcare"
    echo "   Please ensure the MCP server is in the correct location"
fi

# Check Python environment for MCP server
echo ""
echo "🎯 Step 3: Verify MCP Server Dependencies"
if command -v python3 &> /dev/null; then
    python_version=$(python3 --version)
    echo "✅ Python found: $python_version"
    
    if [[ -d "../ai-assited-healthcare" ]]; then
        cd "../ai-assited-healthcare"
        
        # Check if virtual environment exists
        if [[ ! -d ".venv" ]]; then
            echo "📦 Creating Python virtual environment..."
            python3 -m venv .venv
        fi
        
        # Activate virtual environment and install dependencies
        source .venv/bin/activate
        
        echo "📦 Installing MCP server dependencies..."
        if [[ -f "requirements.txt" ]]; then
            pip install -r requirements.txt > /dev/null 2>&1
        else
            pip install fastmcp pandas supabase > /dev/null 2>&1
        fi
        
        echo "✅ MCP server dependencies installed"
        cd - > /dev/null
    fi
else
    echo "❌ Python 3 not found. Please install Python 3.8 or higher"
fi

# Check Node.js dependencies
echo ""
echo "🎯 Step 4: Verify Dashboard Dependencies"
if [[ -f "pnpm-lock.yaml" ]]; then
    echo "📦 Installing dashboard dependencies..."
    pnpm install > /dev/null 2>&1
    echo "✅ Dashboard dependencies installed"
elif [[ -f "package-lock.json" ]]; then
    echo "📦 Installing dashboard dependencies..."
    npm install > /dev/null 2>&1
    echo "✅ Dashboard dependencies installed"
else
    echo "⚠️  No package manager lock file found"
fi

# Create launch scripts
echo ""
echo "🎯 Step 5: Create Launch Scripts"

# Create MCP server launch script
cat > "scripts/start-mcp-server.sh" << 'EOF'
#!/bin/bash

echo "🏥 Starting Healthcare MCP Server..."

# Navigate to MCP server directory
cd "../ai-assited-healthcare" || {
    echo "❌ Error: Could not find MCP server directory"
    exit 1
}

# Check if .env exists
if [[ ! -f ".env" ]]; then
    echo "❌ Error: .env file not found in MCP server directory"
    echo "   Please run the setup script first: bash ../healthcare-dashboard/scripts/setup-supabase-integration.sh"
    exit 1
fi

# Activate virtual environment
if [[ -f ".venv/bin/activate" ]]; then
    source .venv/bin/activate
else
    echo "❌ Error: Python virtual environment not found"
    exit 1
fi

# Start the MCP server
echo "🚀 Starting MCP server on port 3001..."
python main.py
EOF

# Create combined launch script
cat > "scripts/start-both-servers.sh" << 'EOF'
#!/bin/bash

echo "🏥 Starting Healthcare Dashboard with MCP Server"
echo "==============================================="

# Function to cleanup on exit
cleanup() {
    echo ""
    echo "🛑 Shutting down servers..."
    kill $(jobs -p) 2>/dev/null
    exit 0
}

# Set up cleanup trap
trap cleanup SIGINT SIGTERM

# Start MCP server in background
echo "🚀 Starting MCP server..."
bash scripts/start-mcp-server.sh &
MCP_PID=$!

# Wait a moment for MCP server to start
sleep 3

# Start dashboard
echo "🚀 Starting dashboard..."
pnpm run dev &
DASHBOARD_PID=$!

echo ""
echo "✅ Both servers are running:"
echo "   📊 Dashboard: http://localhost:3000"
echo "   🔧 MCP Server: http://localhost:3001"
echo ""
echo "Press Ctrl+C to stop both servers"

# Wait for both processes
wait
EOF

# Make scripts executable
chmod +x scripts/start-mcp-server.sh
chmod +x scripts/start-both-servers.sh

echo "✅ Created launch scripts:"
echo "   - scripts/start-mcp-server.sh"
echo "   - scripts/start-both-servers.sh"

echo ""
echo "🎉 Setup Complete!"
echo "=================="
echo ""
echo "Next steps:"
echo "1. 🚀 Start both servers: bash scripts/start-both-servers.sh"
echo "2. 🌐 Open dashboard: http://localhost:3000"
echo "3. 📊 The dashboard will now use real Supabase data via the MCP server"
echo ""
echo "Troubleshooting:"
echo "- 📖 Read the setup guide: src/lib/setup-guide.md"
echo "- 🔍 Check MCP server logs if data doesn't load"
echo "- 🔧 Verify Supabase credentials in .env files"
echo ""
echo "Happy analyzing! 🏥📈" 